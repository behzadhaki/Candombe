# Set C++ Standard
target_compile_definitions(${BaseTargetName}
        PUBLIC
        JUCE_WEB_BROWSER=0
        JUCE_USE_CURL=0
        JUCE_VST3_CAN_REPLACE_VST2=0)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# ==============================================================================
# Set Platform-Specific Paths
# ==============================================================================
if(CMAKE_SYSTEM_PROCESSOR MATCHES "arm64")
    set(TORCH_VERSION 2.6.0)
else()
    set(TORCH_VERSION 2.0.0)
endif()
set(APP_SUPPORT_PATH "/Library/Application Support")
set(TORCH_ROOT_PATH "/Library/Application Support/libtorch/libtorch-${TORCH_VERSION}-${CMAKE_BUILD_TYPE}")

message(STATUS "APP_SUPPORT_PATH: ${APP_SUPPORT_PATH}")
message(STATUS "TORCH_ROOT_PATH: ${TORCH_ROOT_PATH}")

# ==============================================================================
# Find and Include LibTorch
# ==============================================================================
find_package(Torch HINTS "${TORCH_ROOT_PATH}/libtorch")

if (Torch_FOUND)
    message(STATUS "Torch found at: ${TORCH_INSTALL_PREFIX}")
else()
    message(STATUS "Torch not found! Please install it by running the following in the terminal, from the project root directory.")
    message(FATAL_ERROR "sudo bash CMake/InstallTorch/install_libtorch.sh")
endif()

# Explicitly add Libtorch include directories to fix missing headers issue
include_directories("${TORCH_ROOT_PATH}/include")
include_directories("${TORCH_ROOT_PATH}/include/torch/csrc/api/include")


# ==============================================================================
# Link Required Libraries for Runtime
# ==============================================================================
# Add /usr/local/lib to the library search path

# Ensure CMake searches for libraries in /usr/local/lib

target_link_libraries(${BaseTargetName} PRIVATE
            shared_plugin_helpers
            juce_recommended_config_flags
            juce_recommended_lto_flags
            juce_recommended_warning_flags
            juce::juce_osc
            ${TORCH_LIBRARIES}
            # add resources relative to the binary
            -Wl,-rpath,@loader_path/../Resources
)

# ==============================================================================
# Add Source Files
# ==============================================================================
target_sources(${BaseTargetName} PRIVATE
    ../shared_plugin_helpers/shared_plugin_helpers.cpp
    ../Source/NeuralMidiFXPlugin/PluginProcessor.cpp
    ../Source/NeuralMidiFXPlugin/processBlock.cpp
    ../Source/NeuralMidiFXPlugin/PluginEditor.cpp
    ../Source/DeploymentThreads/DeploymentThread.cpp
    ../Source/Includes/colored_cout.cpp
    deploy.h
    settings.json
)

# ==============================================================================
# Link Required Libraries
# ==============================================================================

# Add libtorch headers to the include directories
# target_include_directories(${BaseTargetName} PRIVATE "${TORCH_INCLUDE_DIRS}")

# ==============================================================================
# Copy DLLs After Build (Windows)
# ==============================================================================



# ==============================================================================
# Define Paths for Resources and Settings
# ==============================================================================
set(ROOT_INSTALL_DIR "${APP_SUPPORT_PATH}/${BaseTargetName}")

execute_process(
  COMMAND sudo -S  mkdir -p "${ROOT_INSTALL_DIR}"
  RESULT_VARIABLE res
)

if (NOT res EQUAL 0)
  message(FATAL_ERROR "Failed to create root directory.")
endif()

# Copy TorchScripts directory
# file(COPY "${CMAKE_SOURCE_DIR}/PluginCode/TorchScripts" DESTINATION "${ROOT_INSTALL_DIR}")
execute_process(
    COMMAND sudo cp -R "${CMAKE_SOURCE_DIR}/PluginCode/TorchScripts" "${ROOT_INSTALL_DIR}"
)

# Define paths for models, processing scripts, and presets
add_definitions(-DDEFAULT_MODEL_DIR="${ROOT_INSTALL_DIR}/TorchScripts/Models")
add_definitions(-DDEFAULT_PROCESSING_SCRIPTS_DIR="${ROOT_INSTALL_DIR}/TorchScripts/ProcessingScripts")
set(DEFAULT_PRESET_DIR "${ROOT_INSTALL_DIR}/Presets")
add_definitions(-DDEFAULT_PRESET_DIR="${ROOT_INSTALL_DIR}/Presets")

# Create GUI directory and copy settings.json
execute_process(
  COMMAND sudo mkdir -p "${ROOT_INSTALL_DIR}/GUI"
  RESULT_VARIABLE res
)

# file(COPY "${CMAKE_SOURCE_DIR}/PluginCode/settings.json" DESTINATION "${ROOT_INSTALL_DIR}/GUI")
execute_process(
    COMMAND sudo cp -R "${CMAKE_SOURCE_DIR}/PluginCode/settings.json" "${ROOT_INSTALL_DIR}/GUI"
)

# Define DEFAULT_SETTINGS_FILE_PATH
set(DEFAULT_SETTINGS_PATH "${ROOT_INSTALL_DIR}/GUI/settings.json")
if (MSVC)
    string(REPLACE "/" "\\\\" DEFAULT_SETTINGS_PATH "${DEFAULT_SETTINGS_PATH}")
endif()
add_definitions(-DDEFAULT_SETTINGS_FILE_PATH="${DEFAULT_SETTINGS_PATH}")
message(STATUS "DEFAULT_SETTINGS_PATH: ${DEFAULT_SETTINGS_PATH}")

# Copy PluginCode/img directory to GUI/img
if (EXISTS "${CMAKE_SOURCE_DIR}/PluginCode/img")
    #file(COPY "${CMAKE_SOURCE_DIR}/PluginCode/img" DESTINATION "${ROOT_INSTALL_DIR}/GUI")
    execute_process(
        COMMAND sudo cp -R "${CMAKE_SOURCE_DIR}/PluginCode/img" "${ROOT_INSTALL_DIR}/GUI"
    )
endif()

# Copy all files in Source/Images to GUI/img
if (EXISTS "${CMAKE_SOURCE_DIR}/Source/Images")
    file(GLOB_RECURSE IMAGES "${CMAKE_SOURCE_DIR}/Source/Images/*")
    foreach(IMAGE ${IMAGES})
        #file(COPY ${IMAGE} DESTINATION "${ROOT_INSTALL_DIR}/GUI/img")
        execute_process(
            COMMAND sudo cp -R ${IMAGE} "${ROOT_INSTALL_DIR}/GUI/img"
        )
        message(STATUS "Copying ${IMAGE} to ${ROOT_INSTALL_DIR}/GUI/img")
    endforeach()
endif()

# Define DEFAULT_IMG_DIR
set(DEFAULT_IMG_DIR "${ROOT_INSTALL_DIR}/GUI/img/")
if (MSVC)
    string(REPLACE "/" "\\\\" DEFAULT_IMG_DIR "${DEFAULT_IMG_DIR}")
endif()
add_definitions(-DDEFAULT_IMG_DIR="${DEFAULT_IMG_DIR}")
message(STATUS "Images are located in: ${DEFAULT_IMG_DIR}")

# Root install directory for runtime resources
add_definitions(-DROOT_INSTALL_DIR="${ROOT_INSTALL_DIR}")

# ==============================================================================
# Create PRESET_DIR if it does not exist
# ==============================================================================
if (NOT EXISTS "${DEFAULT_PRESET_DIR}")
    message(STATUS "Creating Preset Directory...")
    # file(MAKE_DIRECTORY "${DEFAULT_PRESET_DIR}")
    execute_process(
        COMMAND sudo mkdir -p "${DEFAULT_PRESET_DIR}"
        RESULT_VARIABLE res
    )
endif()

# ==============================================================================
# Post Build > Create Resources Directory to the VST Folder (if building for VST)
# ==============================================================================
add_definitions(-DRESOURCES_DIR="${CMAKE_BINARY_DIR}/PluginCode/${BaseTargetName}_artefacts/${CMAKE_BUILD_TYPE}/VST3/${BaseTargetName}.vst3/Contents/Resources")


# move all dylibs to the VST3 folder
add_custom_command(TARGET ${BaseTargetName} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        "${TORCH_ROOT_PATH}/libtorch/lib"
        "${CMAKE_BINARY_DIR}/PluginCode/${BaseTargetName}_artefacts/${CMAKE_BUILD_TYPE}/VST3/${BaseTargetName}.vst3/Contents/Resources"
)

add_custom_command(TARGET ${BaseTargetName} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        "${TORCH_ROOT_PATH}/libtorch/lib"
        "${CMAKE_BINARY_DIR}/PluginCode/${BaseTargetName}_artefacts/${CMAKE_BUILD_TYPE}/AU/${BaseTargetName}.component/Contents/Resources"
)

# Post Build > Move to Local VST3 Folder (VST3)
# Iterate through all dylibs in the Resources folder
file(GLOB_RECURSE DYLIBS "${CMAKE_BINARY_DIR}/PluginCode/${BaseTargetName}_artefacts/${CMAKE_BUILD_TYPE}/VST3/${BaseTargetName}.vst3/Contents/Resources/*.dylib")

# Update the install name and rpath for each dylib
foreach(DYLIB ${DYLIBS})
    # Get the basename of the dylib (e.g., libtorch.dylib)
    get_filename_component(DYLIB_NAME ${DYLIB} NAME)

    # Change the install name to use @rpath
    execute_process(COMMAND install_name_tool -id @rpath/${DYLIB_NAME} ${DYLIB})

    # Change the dependencies to use @rpath
    execute_process(COMMAND install_name_tool -change @rpath/libtorch.dylib @rpath/libtorch.dylib ${DYLIB})
    execute_process(COMMAND install_name_tool -change @rpath/libtorch_cpu.dylib @rpath/libtorch_cpu.dylib ${DYLIB})
    execute_process(COMMAND install_name_tool -change @rpath/libc10.dylib @rpath/libc10.dylib ${DYLIB})
endforeach()

# Post Build > Move to Local AU Folder
file(GLOB_RECURSE DYLIBS_AU "${CMAKE_BINARY_DIR}/PluginCode/${BaseTargetName}_artefacts/${CMAKE_BUILD_TYPE}/AU/${BaseTargetName}.component/Contents/Resources/*.dylib")
# Update the install name and rpath for each dylib
foreach(DYLIB ${DYLIBS_AU})
    # Get the basename of the dylib (e.g., libtorch.dylib)
    get_filename_component(DYLIB_NAME ${DYLIB} NAME)

    # Change the install name to use @rpath
    execute_process(COMMAND install_name_tool -id @rpath/${DYLIB_NAME} ${DYLIB})

    # Change the dependencies to use @rpath
    execute_process(COMMAND install_name_tool -change @rpath/libtorch.dylib @rpath/libtorch.dylib ${DYLIB})
    execute_process(COMMAND install_name_tool -change @rpath/libtorch_cpu.dylib @rpath/libtorch_cpu.dylib ${DYLIB})
    execute_process(COMMAND install_name_tool -change @rpath/libc10.dylib @rpath/libc10.dylib ${DYLIB})
endforeach()


add_custom_command(TARGET ${BaseTargetName} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        "${CMAKE_BINARY_DIR}/PluginCode/${BaseTargetName}_artefacts/${CMAKE_BUILD_TYPE}/VST3/${BaseTargetName}.vst3"
        "$ENV{HOME}/Library/Audio/Plug-Ins/VST3/${BaseTargetName}.vst3"
)
add_custom_command(TARGET ${BaseTargetName} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        "${CMAKE_BINARY_DIR}/PluginCode/${BaseTargetName}_artefacts/${CMAKE_BUILD_TYPE}/AU/${BaseTargetName}.component"
        "$ENV{HOME}/Library/Audio/Plug-Ins/Components/${BaseTargetName}.component"
)

# ==============================================================================
# Final Definitions and Messages
# ==============================================================================
add_definitions(-DAPP_NAME=${BaseTargetName})
message(STATUS "Preset Directory: ${DEFAULT_PRESET_DIR}")
message(STATUS "BaseTargetName: ${BaseTargetName}")
message(STATUS "Target Directory: ${TARGET_DIR}")

# kill sudo password
execute_process(
  COMMAND sudo -k
  RESULT_VARIABLE res
)
if (NOT res EQUAL 0)
  message(FATAL_ERROR "Failed to kill sudo password.")
endif()
message(STATUS "Sudo password killed.")

# ==============================================================================